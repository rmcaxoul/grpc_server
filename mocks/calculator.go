// Code generated by MockGen. DO NOT EDIT.
// Source: calculator/calculator.pb.go

// Package mock_calculator is a generated GoMock package.
package mock_calculator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	calculator "github.com/rmcaxoul/grpc_server/calculator"
	grpc "google.golang.org/grpc"
)

// MockCalculatorClient is a mock of CalculatorClient interface.
type MockCalculatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorClientMockRecorder
}

// MockCalculatorClientMockRecorder is the mock recorder for MockCalculatorClient.
type MockCalculatorClientMockRecorder struct {
	mock *MockCalculatorClient
}

// NewMockCalculatorClient creates a new mock instance.
func NewMockCalculatorClient(ctrl *gomock.Controller) *MockCalculatorClient {
	mock := &MockCalculatorClient{ctrl: ctrl}
	mock.recorder = &MockCalculatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatorClient) EXPECT() *MockCalculatorClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCalculatorClient) Add(ctx context.Context, in *calculator.OpRequest, opts ...grpc.CallOption) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCalculatorClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCalculatorClient)(nil).Add), varargs...)
}

// Div mocks base method.
func (m *MockCalculatorClient) Div(ctx context.Context, in *calculator.DivRequest, opts ...grpc.CallOption) (*calculator.DivResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Div", varargs...)
	ret0, _ := ret[0].(*calculator.DivResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Div indicates an expected call of Div.
func (mr *MockCalculatorClientMockRecorder) Div(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Div", reflect.TypeOf((*MockCalculatorClient)(nil).Div), varargs...)
}

// Mult mocks base method.
func (m *MockCalculatorClient) Mult(ctx context.Context, in *calculator.OpRequest, opts ...grpc.CallOption) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mult", varargs...)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mult indicates an expected call of Mult.
func (mr *MockCalculatorClientMockRecorder) Mult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mult", reflect.TypeOf((*MockCalculatorClient)(nil).Mult), varargs...)
}

// Sub mocks base method.
func (m *MockCalculatorClient) Sub(ctx context.Context, in *calculator.OpRequest, opts ...grpc.CallOption) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sub", varargs...)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sub indicates an expected call of Sub.
func (mr *MockCalculatorClientMockRecorder) Sub(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockCalculatorClient)(nil).Sub), varargs...)
}

// MockCalculatorServer is a mock of CalculatorServer interface.
type MockCalculatorServer struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorServerMockRecorder
}

// MockCalculatorServerMockRecorder is the mock recorder for MockCalculatorServer.
type MockCalculatorServerMockRecorder struct {
	mock *MockCalculatorServer
}

// NewMockCalculatorServer creates a new mock instance.
func NewMockCalculatorServer(ctrl *gomock.Controller) *MockCalculatorServer {
	mock := &MockCalculatorServer{ctrl: ctrl}
	mock.recorder = &MockCalculatorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatorServer) EXPECT() *MockCalculatorServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCalculatorServer) Add(arg0 context.Context, arg1 *calculator.OpRequest) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCalculatorServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCalculatorServer)(nil).Add), arg0, arg1)
}

// Div mocks base method.
func (m *MockCalculatorServer) Div(arg0 context.Context, arg1 *calculator.DivRequest) (*calculator.DivResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Div", arg0, arg1)
	ret0, _ := ret[0].(*calculator.DivResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Div indicates an expected call of Div.
func (mr *MockCalculatorServerMockRecorder) Div(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Div", reflect.TypeOf((*MockCalculatorServer)(nil).Div), arg0, arg1)
}

// Mult mocks base method.
func (m *MockCalculatorServer) Mult(arg0 context.Context, arg1 *calculator.OpRequest) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mult", arg0, arg1)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mult indicates an expected call of Mult.
func (mr *MockCalculatorServerMockRecorder) Mult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mult", reflect.TypeOf((*MockCalculatorServer)(nil).Mult), arg0, arg1)
}

// Sub mocks base method.
func (m *MockCalculatorServer) Sub(arg0 context.Context, arg1 *calculator.OpRequest) (*calculator.OpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", arg0, arg1)
	ret0, _ := ret[0].(*calculator.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sub indicates an expected call of Sub.
func (mr *MockCalculatorServerMockRecorder) Sub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockCalculatorServer)(nil).Sub), arg0, arg1)
}
