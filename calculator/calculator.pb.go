// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package calculator

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpRequest struct {
	First                int32    `protobuf:"varint,1,opt,name=First,proto3" json:"First,omitempty"`
	Second               int32    `protobuf:"varint,2,opt,name=Second,proto3" json:"Second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpRequest) Reset()         { *m = OpRequest{} }
func (m *OpRequest) String() string { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()    {}
func (*OpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *OpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpRequest.Unmarshal(m, b)
}
func (m *OpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpRequest.Marshal(b, m, deterministic)
}
func (m *OpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpRequest.Merge(m, src)
}
func (m *OpRequest) XXX_Size() int {
	return xxx_messageInfo_OpRequest.Size(m)
}
func (m *OpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpRequest proto.InternalMessageInfo

func (m *OpRequest) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *OpRequest) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

type DivRequest struct {
	First                int32    `protobuf:"varint,1,opt,name=First,proto3" json:"First,omitempty"`
	Second               int32    `protobuf:"varint,2,opt,name=Second,proto3" json:"Second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivRequest) Reset()         { *m = DivRequest{} }
func (m *DivRequest) String() string { return proto.CompactTextString(m) }
func (*DivRequest) ProtoMessage()    {}
func (*DivRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *DivRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivRequest.Unmarshal(m, b)
}
func (m *DivRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivRequest.Marshal(b, m, deterministic)
}
func (m *DivRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivRequest.Merge(m, src)
}
func (m *DivRequest) XXX_Size() int {
	return xxx_messageInfo_DivRequest.Size(m)
}
func (m *DivRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DivRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DivRequest proto.InternalMessageInfo

func (m *DivRequest) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *DivRequest) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

type OpResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpResponse) Reset()         { *m = OpResponse{} }
func (m *OpResponse) String() string { return proto.CompactTextString(m) }
func (*OpResponse) ProtoMessage()    {}
func (*OpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{2}
}

func (m *OpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpResponse.Unmarshal(m, b)
}
func (m *OpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpResponse.Marshal(b, m, deterministic)
}
func (m *OpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpResponse.Merge(m, src)
}
func (m *OpResponse) XXX_Size() int {
	return xxx_messageInfo_OpResponse.Size(m)
}
func (m *OpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpResponse proto.InternalMessageInfo

func (m *OpResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type DivResponse struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivResponse) Reset()         { *m = DivResponse{} }
func (m *DivResponse) String() string { return proto.CompactTextString(m) }
func (*DivResponse) ProtoMessage()    {}
func (*DivResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{3}
}

func (m *DivResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivResponse.Unmarshal(m, b)
}
func (m *DivResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivResponse.Marshal(b, m, deterministic)
}
func (m *DivResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivResponse.Merge(m, src)
}
func (m *DivResponse) XXX_Size() int {
	return xxx_messageInfo_DivResponse.Size(m)
}
func (m *DivResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DivResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DivResponse proto.InternalMessageInfo

func (m *DivResponse) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*OpRequest)(nil), "calculator.OpRequest")
	proto.RegisterType((*DivRequest)(nil), "calculator.DivRequest")
	proto.RegisterType((*OpResponse)(nil), "calculator.OpResponse")
	proto.RegisterType((*DivResponse)(nil), "calculator.DivResponse")
}

func init() {
	proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf)
}

var fileDescriptor_c686ea360062a8cf = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0x89, 0x97, 0x25, 0xe6, 0x64, 0xa6, 0x24, 0x96, 0xa4, 0xea, 0xc3, 0x18, 0x10, 0x45, 0x4a,
	0x96, 0x5c, 0x9c, 0xfe, 0x05, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac,
	0x6e, 0x99, 0x45, 0xc5, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x90, 0x18,
	0x17, 0x5b, 0x70, 0x6a, 0x72, 0x7e, 0x5e, 0x8a, 0x04, 0x13, 0x58, 0x18, 0xca, 0x53, 0x72, 0xe6,
	0xe2, 0x72, 0xc9, 0x2c, 0xc3, 0xaf, 0x57, 0x1e, 0x55, 0xaf, 0x13, 0xfb, 0x2f, 0x27, 0x16, 0x29,
	0x26, 0x0b, 0x06, 0xb8, 0x21, 0x2a, 0x5c, 0x5c, 0x20, 0xfb, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x41, 0x56, 0x05, 0xa5, 0x16, 0x97, 0xe6, 0xc0, 0x4c, 0x81, 0xf2, 0x94, 0x54, 0xb9, 0xb8, 0xc1,
	0x56, 0x61, 0x55, 0xc6, 0x04, 0x53, 0x66, 0xf4, 0x9c, 0x91, 0x8b, 0xcb, 0x19, 0xee, 0x69, 0x21,
	0x13, 0x2e, 0x66, 0xc7, 0x94, 0x14, 0x21, 0x51, 0x3d, 0xa4, 0xa0, 0x81, 0x7b, 0x56, 0x4a, 0x0c,
	0x5d, 0x18, 0x6a, 0xb8, 0x09, 0x17, 0x73, 0x70, 0x69, 0x12, 0xa9, 0xba, 0x4c, 0xb9, 0x58, 0x7c,
	0x4b, 0x73, 0x4a, 0x48, 0xd5, 0x66, 0xc6, 0xc5, 0xec, 0x92, 0x59, 0x26, 0x84, 0x22, 0x8d, 0x08,
	0x54, 0x29, 0x71, 0x0c, 0x71, 0x88, 0xbe, 0x24, 0x36, 0x70, 0xec, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0xa8, 0x14, 0x5e, 0xf6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	// Add two numbers.
	Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
	// Substratct two numbers.
	Sub(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
	// Multiply two numbers.
	Mult(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
	// Divide two numbers.
	Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Sub(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Mult(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/Mult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error) {
	out := new(DivResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	// Add two numbers.
	Add(context.Context, *OpRequest) (*OpResponse, error)
	// Substratct two numbers.
	Sub(context.Context, *OpRequest) (*OpResponse, error)
	// Multiply two numbers.
	Mult(context.Context, *OpRequest) (*OpResponse, error)
	// Divide two numbers.
	Div(context.Context, *DivRequest) (*DivResponse, error)
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) Add(ctx context.Context, req *OpRequest) (*OpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCalculatorServer) Sub(ctx context.Context, req *OpRequest) (*OpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (*UnimplementedCalculatorServer) Mult(ctx context.Context, req *OpRequest) (*OpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mult not implemented")
}
func (*UnimplementedCalculatorServer) Div(ctx context.Context, req *DivRequest) (*DivResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Sub(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Mult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Mult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/Mult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Mult(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Div(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calculator_Sub_Handler,
		},
		{
			MethodName: "Mult",
			Handler:    _Calculator_Mult_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Calculator_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
